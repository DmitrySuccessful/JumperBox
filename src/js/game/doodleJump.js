import{ParticleSystem}from"./particles.js";class PowerUp{constructor(x,y,type){this.x=x;this.y=y;this.width=30;this.height=30;this.type=type;this.collected=false}draw(ctx){if(this.collected)return;ctx.fillStyle=this.type==="spring"?"#FF4081":"#FFC107";ctx.fillRect(this.x,this.y,this.width,this.height);ctx.fillStyle="#fff";ctx.font="20px Arial";ctx.fillText(this.type==="spring"?"↑":"★",this.x+8,this.y+22)}}class Player{constructor(x,y){this.x=x;this.y=y;this.width=40;this.height=40;this.velocityX=0;this.velocityY=0;this.isJumping=false;this.powerUpTimer=0;this.hasPowerUp=false}update(canvasWidth){this.velocityY+=.5;this.x+=this.velocityX;this.y+=this.velocityY;if(this.x+this.width<0){this.x=canvasWidth}else if(this.x>canvasWidth){this.x=-this.width}if(this.powerUpTimer>0){this.powerUpTimer--;if(this.powerUpTimer===0){this.hasPowerUp=false}}}draw(ctx){ctx.fillStyle=this.hasPowerUp?"#FFD700":"#4CAF50";ctx.fillRect(this.x,this.y,this.width,this.height);ctx.fillStyle="#000";ctx.beginPath();ctx.arc(this.x+15,this.y+15,3,0,Math.PI*2);ctx.arc(this.x+25,this.y+15,3,0,Math.PI*2);ctx.fill();ctx.beginPath();ctx.arc(this.x+20,this.y+25,5,0,Math.PI);ctx.stroke()}jump(force=-12){this.velocityY=force;this.isJumping=true}activatePowerUp(type){this.hasPowerUp=true;this.powerUpTimer=300;if(type==="spring"){this.jump(-18)}}}class Platform{constructor(x,y,type="normal"){this.x=x;this.y=y;this.width=80;this.height=15;this.type=type;this.broken=false;this.direction=1;this.speed=type==="moving"?2:0;if(Math.random()<.1){this.powerUp=new PowerUp(this.x+this.width/2-15,this.y-35,Math.random()<.5?"spring":"star")}}update(canvasWidth){if(this.type==="moving"){this.x+=this.speed*this.direction;if(this.x<=0||this.x+this.width>=canvasWidth){this.direction*=-1}if(this.powerUp&&!this.powerUp.collected){this.powerUp.x=this.x+this.width/2-15}}}draw(ctx){if(this.broken)return;switch(this.type){case"normal":ctx.fillStyle="#795548";break;case"moving":ctx.fillStyle="#2196F3";break;case"breakable":ctx.fillStyle="#FF5722";break}ctx.fillRect(this.x,this.y,this.width,this.height);if(this.powerUp&&!this.powerUp.collected){this.powerUp.draw(ctx)}}}class Game{constructor(canvas){this.canvas=canvas;this.ctx=canvas.getContext("2d");this.score=0;this.highScore=parseInt(localStorage.getItem("doodleJumpHighScore"))||0;this.gameOver=false;this.platforms=[];this.particles=new ParticleSystem;this.difficulty=1}init(){const canvasWidth=this.canvas.width;const canvasHeight=this.canvas.height;this.player=new Player(canvasWidth/2,canvasHeight-100);this.platforms=[];this.score=0;this.gameOver=false;this.cameraY=0;this.difficulty=1;for(let i=0;i<7;i++){this.generatePlatform(i*100)}}generatePlatform(y){const types=["normal","moving","breakable"];const type=Math.random()<.7?"normal":types[Math.floor(Math.random()*types.length)];const x=Math.random()*(this.canvas.width-80);this.platforms.push(new Platform(x,y,type))}update(){if(this.gameOver)return;const canvasWidth=this.canvas.width;const canvasHeight=this.canvas.height;this.player.update(canvasWidth);this.particles.update();this.difficulty=1+Math.floor(this.score/1e3);if(this.player.y<canvasHeight/2){const diff=canvasHeight/2-this.player.y;this.cameraY+=diff;this.player.y+=diff;this.platforms.forEach(platform=>{platform.y+=diff;if(platform.powerUp){platform.powerUp.y+=diff}});this.platforms=this.platforms.filter(platform=>platform.y<canvasHeight);while(this.platforms.length<7){this.generatePlatform(this.platforms[this.platforms.length-1].y-100)}this.score=Math.floor(this.cameraY/100)}this.platforms.forEach(platform=>{platform.update(canvasWidth);if(platform.powerUp&&!platform.powerUp.collected&&this.player.x+this.player.width>platform.powerUp.x&&this.player.x<platform.powerUp.x+platform.powerUp.width&&this.player.y+this.player.height>platform.powerUp.y&&this.player.y<platform.powerUp.y+platform.powerUp.height){platform.powerUp.collected=true;this.player.activatePowerUp(platform.powerUp.type)}if(!platform.broken&&this.player.velocityY>0&&this.player.x+this.player.width>platform.x&&this.player.x<platform.x+platform.width&&this.player.y+this.player.height>platform.y&&this.player.y+this.player.height<platform.y+platform.height+10){if(platform.type==="breakable"){platform.broken=true}this.player.jump();this.particles.createJumpEffect(this.player.x,this.player.y+this.player.height)}});if(this.player.y>canvasHeight){this.gameOver=true;if(this.score>this.highScore){this.highScore=this.score;localStorage.setItem("doodleJumpHighScore",this.highScore)}}}draw(){const canvasWidth=this.canvas.width;const canvasHeight=this.canvas.height;this.ctx.clearRect(0,0,canvasWidth,canvasHeight);this.ctx.fillStyle="#E0F7FA";this.ctx.fillRect(0,0,canvasWidth,canvasHeight);this.platforms.forEach(platform=>platform.draw(this.ctx));this.particles.draw(this.ctx);this.player.draw(this.ctx);this.ctx.fillStyle="#000";this.ctx.font="20px Arial";this.ctx.fillText(`Score: ${this.score}`,10,30);this.ctx.fillText(`High Score: ${this.highScore}`,10,60);this.ctx.fillText(`Level: ${this.difficulty}`,canvasWidth-100,30);if(this.gameOver){this.ctx.fillStyle="rgba(0, 0, 0, 0.5)";this.ctx.fillRect(0,0,canvasWidth,canvasHeight);this.ctx.fillStyle="#fff";this.ctx.font="40px Arial";this.ctx.fillText("Game Over!",canvasWidth/2-100,canvasHeight/2-40);this.ctx.font="20px Arial";this.ctx.fillText(`Final Score: ${this.score}`,canvasWidth/2-60,canvasHeight/2+60)}}gameLoop(){this.update();this.draw();requestAnimationFrame(()=>this.gameLoop())}}export{Game};
